{"version":3,"file":"5769.e2198e41916b3c9e5681.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n  updateRequestedMessageTranslation,\n  removeRequestedMessageTranslation,\n  updateMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectLanguageCode,\n  selectForwardsCanBeSentToChat,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isAuthRememberMe?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  isAuthRememberMe,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(isAuthRememberMe ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"char-K\"\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\nimport { getActions } from '../../../global';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' ? ['date', 'id'] : ['id'];\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/windowEnvironment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","threadInfo","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","originChannelId","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isAuthRememberMe","authRememberMe","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","worker","initializationDeferred","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","saveDraft","isEditing","updateDraft","prevState","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","useDraft","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","setCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}